<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" height="600" width="1300"
	creationComplete="launchLogin()" visible="false" frameRate="30" 
	xmlns:control="com.effectiveui.control.*" horizontalCenter="0" verticalCenter="0" 
	xmlns:component="com.effectiveui.component.*" xmlns:util="com.effectiveui.util.*">
	<control:TracUIController id="controller"/>
	<mx:Script>
		<![CDATA[
			import com.effectiveui.event.GetNewTicketsEvent;
			import com.effectiveui.event.GetScoresEvent;
			import com.effectiveui.component.TracTicket;
			import mx.events.DataGridEventReason;
			import mx.events.DataGridEvent;
			import mx.controls.ProgressBarMode;
			import com.effectiveui.event.UpdateTicketEvent;
			import com.effectiveui.event.CreateNewTicketEvent;
			import com.effectiveui.view.window.LoginWindow;
			import com.effectiveui.event.GetTicketsEvent;
			import com.effectiveui.model.TracModel;			
			
			[Bindable]
			private var model:TracModel = TracModel.getInstance();						
			
			protected function launchLogin():void{
				var login:LoginWindow = new LoginWindow();
				login.open();
				login.orderToFront();
				model.tickets.filterFunction = evalFilters;		
				login.addEventListener(Event.CLOSING, handleLoginClosing);		
			}
			
			protected function handleLoginClosing(event:Event):void{
				if(model.loggedIn){
					this.visible = true;
					this.move(50,100);
				} else {
					close();
				}
			}
			
			protected function evalFilters(data:Object):Boolean{				
				if(textFilter.text && textFilter.text.length > 0){
					var filterWords:Array = textFilter.text.toLowerCase().split(" ");
					var summaryCount:int = 0;
					var descCount:int = 0;
					var summary:String = (data.summary as String).toLowerCase();
					var desc:String = (data.description as String).toLowerCase();
					for each(var word:String in filterWords){
						if(summary.indexOf(word) != -1){
							summaryCount++;
						}
						if(desc.indexOf(word) != -1){
							descCount++;
						}
					}					
					if((summaryCount <= 0 || (summaryCount/filterWords.length)*10 < 7) && (descCount <= 0 || (descCount/filterWords.length)*10 < 7)){
						return false;
					}
				}
				if(statusBox.selectedIndex != 0 && statusBox.selectedItem){
					if(data.status.toString() != statusBox.selectedItem.toString()){
						return false;
					}
				}
				if(versionBox.selectedIndex != 0 && versionBox.selectedItem){
					if(data.version.toString() != versionBox.selectedItem.toString()){
						return false;
					}
				}
				if(milestoneBox.selectedIndex != 0 && milestoneBox.selectedItem){
					if(data.milestone.toString() != milestoneBox.selectedItem.toString()){
						return false;
					}
				}
				if(keywordFilter.text && keywordFilter.text.length > 0){
					var keywords:Array = keywordFilter.text.split(" ");
					var keywordData:String = (data.keywords as String).toLowerCase();
					for each(var keyword:String in keywords){
						if(keywordData.indexOf(keyword) == -1){
							return false;
						}
					}
				}
				if(componentBox.selectedIndex != 0 && componentBox.selectedItem){
					if(data.component.toString() != componentBox.selectedItem.toString()){
						return false;
					}
				}
				if(priorityBox.selectedIndex != 0 && priorityBox.selectedItem){
					if(data.priority.toString() != priorityBox.selectedItem.toString()){
						return false;
					}
				}
				if(resolutionBox.selectedIndex != 0 && resolutionBox.selectedItem){
					if(data.resolution.toString() != resolutionBox.selectedItem.toString()){
						return false;
					}
				}
				if(typeBox.selectedIndex != 0 && typeBox.selectedItem){
					if(data.type.toString() != typeBox.selectedItem.toString()){
						return false;
					}
				}
				return true;
			}
			
			protected var editedItem:TracTicket;
			protected function updateDescription():void{
				if(editedItem){					
					editedItem.description = description.text
					new UpdateTicketEvent(editedItem).dispatch();
					editedItem = null;
				}
			}
			
			protected function submitNewTicket():void{
				new CreateNewTicketEvent(model.currentTicket).dispatch();
				renewView();
				clearNewTicketCreator();
				updateTickets();
				model.tickets.refresh();
			}
			
			protected function updateTickets():void{
				new GetNewTicketsEvent(model.currentTimeStamp).dispatch();
				model.currentTimeStamp = model.dateToISO();
				model.tickets.refresh();
			}
			
			protected function renewView():void{
				dashboardAccordian.selectedIndex = 0;
				hideOrShowCreateNew();
				clearNewTicketCreator();
			}
			
			protected function clearNewTicketCreator():void{
				newTicketSummary.text = "";
				newTypeBox.selectedIndex=0;
				newDescription.text="";
				newPriorityBox.selectedIndex=0;
				newComponentBox.selectedIndex=0;
				newKeywords.text="";
				newMilestoneBox.selectedIndex=0;
				newVersionBox.selectedIndex=0;
				newOwnerBox.selectedIndex=0;
			}
			
			protected function updateTicketProgress():void{
				ticketProgress.setProgress(model.numTicketsLoaded, model.ticketCount);
			}			
			
			protected function sortSummary(obj1:Object, obj2:Object):int{
				var summary1:String = obj1.summary;
				var summary2:String = obj2.summary;
				
				if(summary1.toLowerCase() < summary2.toLowerCase()){
					return -1;
				} 
				if(summary1.toLowerCase() > summary2.toLowerCase()){
					return 1;
				}
				
				return 0;
			}
			
			protected function sortID(obj1:Object, obj2:Object):int{
				var id1:int = Number(obj1.id as String);
				var id2:int = Number(obj2.id as String);
				
				if(id1 < id2){
					return -1;
				}
				if(id1 > id2){
					return 1;
				}
				
				return 0;
			}
			
			protected function handleOwnerChanged():void{
				var getTickets:GetTicketsEvent = new GetTicketsEvent(ownerBox.selectedItem.toString());
				getTickets.dispatch();
			}
			
			protected function setOwner():void{
				if(model.owners.contains(model.username)){
					ownerBox.selectedIndex = model.owners.getItemIndex(model.username);					
				}
			}
			
			protected function calculateScores():void{
				new GetScoresEvent().dispatch();
			}
			
			protected function hideOrShowCreateNew():void{
				if(dashboardAccordian.selectedChild.id	== "newTicketBox")
					dashboardAccordian.percentWidth = 100;
				else
					dashboardAccordian.width = 240;
			}
			
			protected function getNewTheme(index:int):void{
				switch(index){
					case 0:
						StyleManager.loadStyleDeclarations("assets/Blue.swf",true);
						break;
					case 1:
						StyleManager.loadStyleDeclarations("assets/Green.swf",true);
						break;
					case 2:
						StyleManager.loadStyleDeclarations("assets/Orange.swf",true);
						break;
					case 3:
						StyleManager.loadStyleDeclarations("assets/Pink.swf",true);
						break;
					case 4:
						StyleManager.loadStyleDeclarations("assets/Silver.swf",true);
						break;
				}
				
			}
			
		]]>
	</mx:Script>
	<mx:Style source="assets/styles.css"/>
	<mx:Resize id="resizeNewTicket" duration="700"/>
	<mx:HBox height="100%" width="100%" horizontalGap="0" backgroundColor="#000000">
		<mx:Accordion id="dashboardAccordian" height="100%" width="240" borderColor="#222222" backgroundColor="#111111"
			click="hideOrShowCreateNew()" resizeEffect="{resizeNewTicket}" headerStyleName="accordionHeader">
			<mx:VBox id="filterList" label="Filters" width="100%" height="100%" 
				paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5" verticalGap="0">
				<mx:Canvas height="100%" width="100%"
					borderColor="#000000" cornerRadius="8" backgroundColor="#50504D">
					<mx:VBox width="100%" height="100%" verticalGap="0" paddingLeft="5">
						<mx:Spacer height="10"/>
						<mx:Text text="Summary/Description: "/>
						<mx:TextInput  id="textFilter" change="model.tickets.refresh()" width="90%"/>
						<mx:Spacer height="10"/>
						<mx:Text text="Status:"/>
						<mx:ComboBox id="statusBox" dataProvider="{model.statuses}" change="model.tickets.refresh()" dataChange="statusBox.selectedIndex = 0"/>
						<mx:Spacer height="10"/>
						<mx:Text text="Version:"/>
						<mx:ComboBox id="versionBox" dataProvider="{model.versions}" change="model.tickets.refresh()" dataChange="versionBox.selectedIndex = 0"/>
						<mx:Spacer height="10"/>
						<mx:Text text="Milestone:"/>
						<mx:ComboBox id="milestoneBox" dataProvider="{model.milestones}" change="model.tickets.refresh()" dataChange="milestoneBox.selectedIndex = 0"/>
						<mx:Spacer height="10"/>		
						<mx:Text text="Owner:"/>
						<mx:ComboBox id="ownerBox" dataProvider="{model.owners}" change="handleOwnerChanged()"/>
						<mx:Spacer height="10"/>
						<mx:Text text="Keywords:"/>
						<mx:TextInput id="keywordFilter" change="model.tickets.refresh()" width="90%"/>		
						<mx:Spacer height="10"/>
						<mx:Text text="Component:"/>
						<mx:ComboBox id="componentBox" dataProvider="{model.components}" change="model.tickets.refresh()" dataChange="componentBox.selectedIndex = 0"/>
						<mx:Spacer height="10"/>
						<mx:Text text="Priority:"/>
						<mx:ComboBox id="priorityBox" dataProvider="{model.priorities}" change="model.tickets.refresh()" dataChange="priorityBox.selectedIndex = 0"/>
						<mx:Spacer height="10"/>
						<mx:Text text="Type:"/>
						<mx:ComboBox id="typeBox" dataProvider="{model.types}" change="model.tickets.refresh()" dataChange="typeBox.selectedIndex = 0"/>
						<mx:Spacer height="10"/>
						<mx:Text text="Resolution:"/>
						<mx:ComboBox id="resolutionBox" dataProvider="{model.resolutions}" change="model.tickets.refresh()" dataChange="resolutionBox.selectedIndex = 0"/>		
					</mx:VBox>
				</mx:Canvas>
			</mx:VBox>
			<mx:VBox id="newTicketBox" label="New Ticket" width="100%" height="100%" verticalGap="0">
				<mx:VBox label="Create New Ticket"  width="100%" height="100%" 
					paddingLeft="10" paddingBottom="10" paddingRight="10" verticalGap="0">
					<mx:Spacer height="5"/>
					<mx:Canvas height="20" width="100%">
						<mx:Button id="clearTicket" label="clear" height="15" width="70" top="0" right="5" 
							styleName="customButtonStyle" click="clearNewTicketCreator()"/>
					</mx:Canvas>
					<mx:Canvas height="100%" width="100%" right="5" left="5" top="5" bottom="5"
						borderColor="#333333" borderThickness="2" cornerRadius="8" backgroundColor="#50504D">
						<mx:VBox label="Create New Ticket"  width="100%" height="100%" paddingLeft="5" paddingBottom="5" verticalGap="0">
							<mx:Spacer height="5"/>
							<mx:Text text="Short Summary: "/>
							<mx:TextInput id="newTicketSummary" change="model.currentTicket.summary = newTicketSummary.text" width="85%"
								top="5" bottom="5" right="10" left="10" />
							<mx:Spacer height="10"/>
							<mx:HBox height="25" width="100%" horizontalGap="0">
								<mx:Text text="Type: "/>
								<mx:ComboBox id="newTypeBox" dataProvider="{model.types}" change="model.currentTicket.type = newTypeBox.selectedItem as String" 
									dataChange="newTypeBox.selectedIndex = 0"/>
							</mx:HBox>
							<mx:Text text="Full description: "/>
							<mx:TextArea id="newDescription" height="100%" width="85%" focusOut="model.currentTicket.description = newDescription.text" 
								backgroundColor="#60605C" color="#FFFFFF" cornerRadius="4"
								top="5" bottom="5" right="10" left="10" borderColor="#000000"/>
							<mx:Spacer height="10"/>
							<mx:HBox id="ticketProperties" height = "100%" width="100%">
								<mx:VBox height="100%" width="100%" verticalGap="5">
									<mx:HBox height="100%" width="100%">
										<mx:Text text="Priority: "/>
										<mx:ComboBox id="newPriorityBox" dataProvider="{model.priorities}" change="model.currentTicket.priority = newPriorityBox.selectedItem as String" 
											dataChange="newPriorityBox.selectedIndex = 0"/>
									</mx:HBox>
									<mx:HBox height="100%" width="100%">
										<mx:Text text="Component:"/>
										<mx:ComboBox id="newComponentBox" dataProvider="{model.components}" change="model.currentTicket.component = newComponentBox.selectedItem as String" 
											dataChange="newComponentBox.selectedIndex = 0"/>
									</mx:HBox>
									<mx:HBox height="100%" width="100%">
										<mx:Text text="Keywords:"/>
										<mx:TextInput id="newKeywords" change="model.currentTicket.keywords = newKeywords.text" width="100%"
											top="5" bottom="5" right="10" left="10"/>	
									</mx:HBox>
								</mx:VBox>
								<mx:VRule top="5" bottom="5" height="100%" strokeColor="#333333" shadowColor="#666666" strokeWidth="2"/>
								<mx:VBox height="100%" width="100%" verticalGap="5">
									<mx:HBox height="100%" width="100%">
										<mx:Text text="Milestone:"/>
										<mx:ComboBox  id="newMilestoneBox" dataProvider="{model.milestones}" change="model.currentTicket.milestone = newMilestoneBox.selectedItem as String" 
											dataChange="newMilestoneBox.selectedIndex = 0" />
									</mx:HBox>
									<mx:HBox height="100%" width="100%">
										<mx:Text text="Version:"/>
										<mx:ComboBox id="newVersionBox" dataProvider="{model.versions}" change="model.currentTicket.version = newVersionBox.selectedItem as String" 
											dataChange="versionBox.selectedIndex = 0"/>
									</mx:HBox>
									<mx:HBox height="100%" width="100%">
										<mx:Text text="Assign To:"/>
										<mx:ComboBox id="newOwnerBox" dataProvider="{model.owners}" change="model.currentTicket.owner = newOwnerBox.selectedItem as String"/>
									</mx:HBox>
								</mx:VBox>
							</mx:HBox>
							<mx:Spacer height="10"/>
							<mx:Canvas height="25" width="100%">
								<mx:Button id="submitTicket" label="Submit ticket" height="20" width="150" left="20" styleName="customButtonStyle"
									 enabled="{newTicketSummary.text.length !=0 &amp;&amp; newDescription.text.length !=0}" click="submitNewTicket()"/>
								<mx:Button id="cancelTicket" label="Cancel" height="20" width="150" right="20" click="renewView()" 
									styleName="customButtonStyle"/>
							</mx:Canvas>
						</mx:VBox>
					</mx:Canvas>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox label="Score Board" horizontalScrollPolicy="off" width="240">
				<mx:Spacer height="5"/>
				<mx:Button label="Get Scores" click="calculateScores()" styleName="customButtonStyle"/>
				<component:TracScoreBoard height="100%" width="100%" title="Scores"/>
			</mx:VBox>
		</mx:Accordion>
		<mx:Canvas height="100%" width="100%" right="0">
			<mx:Button id="refreshTickets" height="20" width="70" top="15" left="5" paddingBottom="5" label="Refresh" 
				styleName="customButtonStyle" click="updateTickets()"/>
			<mx:VBox right="0" height="100%" verticalGap="0">
				<mx:Text text="{'Currently viewing ' + model.tickets.length + ' tickets'}" right="0"/>
				<mx:HBox bottom="5" right="0" height="25" width="100%" horizontalGap="0" horizontalAlign="right" verticalAlign="bottom" paddingBottom="5">
					<mx:Text text="Theme: "/>
					<mx:ComboBox  id="themeBox" dataProvider="{model.themes}" change="getNewTheme(themeBox.selectedIndex)"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VDividedBox height="100%" width="100%" top="40" dividerThickness="1">
				<mx:VBox height="100%" width="100%">
					<component:TracDataGrid id="ticketGrid" dataProvider="{model.tickets}" height="100%" width="100%" 
							itemFocusIn="description.text = event.target.selectedItem.description" editable="true" rowHeight="25"
							alternatingItemColors="[#333333,#555555]" headerColors="#444444" verticalGridLineColor="#666666"
							borderColor="#222222">
						<component:columns>
							<mx:DataGridColumn dataField="id" width="35" editable="false" sortCompareFunction="sortID" />
							<mx:DataGridColumn dataField="summary" minWidth="280" itemEditor="com.effectiveui.view.editors.SummaryEditor" sortCompareFunction="sortSummary" />				
							<mx:DataGridColumn dataField="version" width="40" editable="false" dataTipField="label"/>			
							<mx:DataGridColumn dataField="milestone" width="60" itemRenderer="com.effectiveui.view.editors.MilestoneEditor" rendererIsEditor="true" />
							<mx:DataGridColumn dataField="owner" minWidth="55" itemRenderer="com.effectiveui.view.editors.OwnerEditor" rendererIsEditor="true" />
							<mx:DataGridColumn dataField="resolution" minWidth="60" itemRenderer="com.effectiveui.view.editors.ResolutionEditor" rendererIsEditor="true" />				
							<mx:DataGridColumn dataField="component" minWidth="55" itemRenderer="com.effectiveui.view.editors.ComponentEditor" rendererIsEditor="true"/>												
							<mx:DataGridColumn dataField="priority" minWidth="50" itemRenderer="com.effectiveui.view.editors.PriorityEditor" rendererIsEditor="true" />
							<mx:DataGridColumn dataField="keywords" minWidth="80" itemEditor="com.effectiveui.view.editors.KeywordEditor" />			
							<mx:DataGridColumn dataField="reporter" minWidth="70" itemEditor="com.effectiveui.view.editors.ReporterEditor" />				
							<mx:DataGridColumn dataField="type" minWidth="80" itemRenderer="com.effectiveui.view.editors.TypeEditor" rendererIsEditor="true" />
							<mx:DataGridColumn dataField="status" minWidth="50" itemRenderer="com.effectiveui.view.editors.StatusEditor" rendererIsEditor="true" />							
						</component:columns>
					</component:TracDataGrid>
				</mx:VBox>
				<mx:Canvas	height="40%" width="100%" backgroundColor="#222222" borderThickness="2" borderColor="#000000">
				<mx:TextArea id="description" height="100%" width="100%" backgroundColor="#60605C" color="#FFFFFF" cornerRadius="4"
					top="5" bottom="5" right="10" left="10" borderColor="#000000"
					change="editedItem = TracTicket(ticketGrid.selectedItem)" focusOut="updateDescription()"/>
				</mx:Canvas>
			</mx:VDividedBox>
		</mx:Canvas>	
	</mx:HBox>
	<mx:Canvas height="100%" width="{width - dashboardAccordian.width}" 
		visible="{!model.ticketsLoaded}" backgroundColor="#999999" borderColor="#333333" cornerRadius="8" right="0">	
		<mx:ProgressBar id="ticketProgress" label="{'Loading Tickets ' + ticketProgress.percentComplete.toPrecision(0) + '%'}" 
			mode="{ProgressBarMode.MANUAL}" labelPlacement="center"
			horizontalCenter="0" verticalCenter="0" fontSize="14" fontWeight="bold" color="#000000"/>		  
	</mx:Canvas>
	<util:Observe source="{model.numTicketsLoaded}" handler="{updateTicketProgress}"/>
	<util:Observe source="{model.owners.length}" handler="{setOwner}"/>
</mx:WindowedApplication>
