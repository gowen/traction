<?xml version="1.0" encoding="utf-8"?>
<!--
	Copyright 2008 Greg Owen, Phil Owen, Jacob Henry
	
	Website: http://github.com/gowen/traction 

    This file is part of Traction.

    Traction is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    Traction is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Traction.  If not, see <http://www.gnu.org/licenses/>.

-->
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="450" height="200" creationComplete="init()" backgroundColor="#000000">
	<mx:Canvas height="100%" width="100%" top="5" bottom="5" left="5" right="5" cornerRadius="4" backgroundColor="#444441" borderColor="#000000">
		<mx:Text text="Could not login. Please try again" fontWeight="bold" color="0x990000" visible="false" id="errorMsg" horizontalCenter="0"/>
		<mx:VBox left="30" top="25" verticalGap="12">
			<mx:Text text="Username:"/>
			<mx:Text text="Password:"/>
			<mx:Text text="Server URL:"/>
		</mx:VBox>
		<mx:VBox left="100" top="25">
			<mx:TextInput id="uname" enabled="{!loggingIn}"/>
			<mx:TextInput id="pass" displayAsPassword="true" enabled="{!loggingIn}"/>
			<mx:TextInput text="&lt; enter Trac URL here >" id="serverURL" enabled="{!loggingIn}"/>
		</mx:VBox>		
		<mx:HBox bottom="30" horizontalCenter="0">
			<mx:Button label="Submit" click="login()" styleName="customButtonStyle" />
			<mx:CheckBox label="Store my login information" id="store" textRollOverColor="#128FC9"/>	
		</mx:HBox>	
		<mx:Script>
			<![CDATA[
				import com.effectiveui.util.IOUtil;
				import com.effectiveui.event.GetNewTicketsEvent;
				import com.effectiveui.command.GetTicketsCommand;
				import com.effectiveui.event.UpdateTicketEvent;
				import com.mattism.http.xmlrpc.ConnectionImpl;
				import com.effectiveui.event.GetOwnersEvent;
				import com.effectiveui.event.GetTypesEvent;
				import com.effectiveui.event.GetVersionsEvent;
				import com.effectiveui.event.GetStatusesEvent;
				import com.effectiveui.event.GetResolutionsEvent;
				import com.effectiveui.event.GetPrioritiesEvent;
				import com.effectiveui.event.GetComponentsEvent;
				import com.effectiveui.event.GetMilestonesEvent;
				import com.effectiveui.event.GetTicketsEvent;
				import com.effectiveui.model.TracModel;
				
				[Bindable]
				protected var loggingIn:Boolean = false;
				
				private function init():void{
					addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
					this.focusManager.setFocus(uname);
					var loginBytes:ByteArray = EncryptedLocalStore.getItem("loginInfo");
					if(loginBytes){
						loginBytes.position = 0;
						uname.text = loginBytes.readUTF();
						pass.text = loginBytes.readUTF();
						serverURL.text = loginBytes.readUTF();
						store.selected = true;
					}
				}
				
				private var model:TracModel = TracModel.getInstance();
			
				/**
				 * The login function uses the user's credentials to try to connect to the Trac 
				 * server and call the standard "listMethods" method.  If this succeeds then we
				 * know that the user's credendials are correct. Otherwise we do not consider the
				 * user to be "logged in."
				 * */
				private function login():void{
					loggingIn = true;
					trace("attempting to login");
					model.username = uname.text;
					model.password = pass.text;					
					model.projectName = serverURL.text.substring(serverURL.text.lastIndexOf('/') + 1, serverURL.text.length);
					if(model.username && model.username.length > 0 && model.password && model.password.length > 0){
						model.serverURL = serverURL.text + "/login/xmlrpc";							
						model.projectPath = model.username + "/" + model.projectName;
					} else {
						model.serverURL = serverURL.text + "/xmlrpc";
						model.projectPath = model.projectName;
					}
									
					var conn:ConnectionImpl = new ConnectionImpl(model.serverURL, model.username, model.password);	
					conn.addEventListener(Event.COMPLETE, handleLogin);		
					conn.addEventListener(IOErrorEvent.IO_ERROR, handleLoginFailed);
					conn.call("system.listMethods");												
				}
				
				/**
				 * If the "listMethods" method can be called then we know the user's credentials are
				 * valid and consider them to be "logged in." We then attempt to open a connection to
				 * the local DB and create the schema if necessary.
				 * */
				protected function handleLogin(event:Event):void{		
					trace("logged in successfully");
					model.dbConnection = new SQLConnection();
					model.dbConnection.addEventListener(SQLEvent.OPEN, createDBSchema);
					model.dbConnection.addEventListener(SQLErrorEvent.ERROR, continueLogin);
					if(!File.applicationStorageDirectory.resolvePath(model.projectPath).exists){
						File.applicationStorageDirectory.resolvePath(model.projectPath).createDirectory();
					}
					model.dbConnection.openAsync(File.applicationStorageDirectory.resolvePath(model.projectPath).resolvePath('\cache.db'));
				}
				
				/**
				 * Attempts to create the DB schema if necessary.
				 * */
				protected function createDBSchema(event:Event):void{
					model.dbConnection.removeEventListener(SQLEvent.OPEN, createDBSchema);
					var createStmt:SQLStatement = new SQLStatement();
					createStmt.sqlConnection = model.dbConnection;
					createStmt.text = "CREATE TABLE IF NOT EXISTS tickets(" +
									"	id TEXT PRIMARY KEY, " +
									"	summary TEXT, " +
									" 	description TEXT," +
									"	version TEXT, " +
									"	milestone TEXT, " +
									"	owner TEXT," +
									"   resolution TEXT," +
									"	component TEXT," +
									"	priority TEXT," +
									"	keywords TEXT," +
									"	reporter TEXT," +
									"	type TEXT," +
									" 	status TEXT" +
									")";
					createStmt.addEventListener(SQLEvent.RESULT, continueLogin);
					createStmt.addEventListener(SQLErrorEvent.ERROR, continueLogin);
					createStmt.execute();	
				}
				
				/** 
				 * Called once the DB calls return. If any of the DB calls failed then we will work in
				 * non-caching mode. This means we'll only show active tickets and no tickets will be saved
				 * locally. If the DB connection is made then we check for a saved timestamp. If there is one
				 * then we load the tickets out of the DB and update our local copy with changes since the
				 * cached timestamp. If there is not cached timestamp then we assume that there are no tickets 
				 * stored locally and we attempt to download all tickets from the server.
				 * */
				protected function continueLogin(event:Event):void{		
					trace("getting values for columns");						
					new GetMilestonesEvent().dispatch();				
					new GetPrioritiesEvent().dispatch();
					new GetResolutionsEvent().dispatch();
					new GetStatusesEvent().dispatch();
					new GetVersionsEvent().dispatch();
					new GetComponentsEvent().dispatch();
					new GetTypesEvent().dispatch();
					//new GetOwnersEvent().dispatch();
					if(File.applicationStorageDirectory.resolvePath(model.projectPath).resolvePath('lastUpdated.dat').exists && model.dbConnection.connected && !(event is SQLErrorEvent)){
						model.sync = true;
						var lastTime:Number = IOUtil.readTime();
						model.currentTimeStamp = lastTime;
						IOUtil.loadAllTickets();																								
					} else if(!model.dbConnection.connected || event is SQLErrorEvent){
						//if the db connection errored then just work locally
						new GetTicketsEvent(GetTicketsEvent.GET_ACTIVE).dispatch();
					} else{
						model.firstSync = true;
						new GetTicketsEvent(GetTicketsEvent.GET_ALL).dispatch();
					}
					
					if(store.selected){
						storeLoginInfo();
					} else {
						EncryptedLocalStore.removeItem("loginInfo");
					}
					closeLogin();
				} 
				
				protected function storeLoginInfo():void{
					var loginBytes:ByteArray = new ByteArray();
					loginBytes.writeUTF(model.username);
					loginBytes.writeUTF(model.password);
					loginBytes.writeUTF(serverURL.text);
					loginBytes.position = 0;
					EncryptedLocalStore.setItem("loginInfo", loginBytes);
				}
				
				protected function closeLogin():void{
					removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
					model.loggedIn = true;
					close();
				}
				
				private function handleKeyDown(event:KeyboardEvent):void{
					if(event.keyCode == Keyboard.ENTER){
						login();
					}
				}
				
				protected function handleLoginFailed(event:Event):void{
					trace("login failed");
					loggingIn = false;
					errorMsg.visible = true;
				}
			]]>
		</mx:Script>
	</mx:Canvas>
</mx:Window>
